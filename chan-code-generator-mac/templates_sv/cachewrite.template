package com.ai.channel.__project__.cache;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.ai.channel.base.BusinessConstants;
import com.ai.channel.base.vo.BaseResponse;
import com.ai.channel.common.cmpt.mcs.MCSClientFactory;
import com.ai.channel.common.cmpt.mcs.base.AbstractCache;
import com.ai.channel.common.util.CollectionUtil;
import com.ai.channel.indexreporting.api.__svkey__.param.Query__SvKey__Request;
import com.ai.channel.indexreporting.api.__svkey__.vo.__SvKey__ItemVo;
import com.ai.channel.indexreporting.service.business.interfaces.I__SvKey__BusiSV;
import com.ai.paas.ipaas.mcs.interfaces.ICacheClient;
import com.alibaba.fastjson.JSON;

/** 
 * __SvKey__Cache.java
 * 
 * 
 * @date 
 * @author __author__
 */
@Component
public class __SvKey__Cache extends AbstractCache {
	private static final Logger log=LoggerFactory.getLogger(__SvKey__Cache.class);

	@Autowired
	I__SvKey__BusiSV __svKey__BusiSV;
	
	@Override
	public void write() throws Exception {
		log.info("__SvKey__Cache write start "+JSON.toJSONString(System.currentTimeMillis()));
		ICacheClient cacheClient=MCSClientFactory.getCacheClient("cache client namespace string");
		Map<String,List<__SvKey__ItemVo>> cacheMap=new HashMap<>();
		Query__SvKey__Request request=new Query__SvKey__Request();
		request.setOrderByClause("");
		log.info("__SvKey__Cache write request:"+JSON.toJSONString(request));
		BaseResponse<List<__SvKey__ItemVo>> response=__svKey__BusiSV.queryList__SvKey__(request);
		log.info("__SvKey__Cache write response:"+JSON.toJSONString(response));
		if(response!=null&&BusinessConstants.BUSI_SUCCESS_CODE.equals(response.getResultCode())) {
			if(!CollectionUtil.isEmpty(response.getResult())) {
				List<__SvKey__ItemVo> __svKey__s=response.getResult();
				String key="";
				for(__SvKey__ItemVo __svKey__:__svKey__s) {
					key="";
					addCacheMap(cacheMap,key,__svKey__);
					key="";
					addCacheMap(cacheMap,key,__svKey__);
				}
			}
		}
		log.info("__SvKey__Cache write cacheMap:"+JSON.toJSONString(cacheMap));
		for(String key:cacheMap.keySet()) {
			cacheClient.hset("cache client table string",key,JSON.toJSONString(cacheMap.get(key)));
		}
		log.info("__SvKey__Cache write end "+JSON.toJSONString(System.currentTimeMillis()));
	}
	
	private Map<String,List<__SvKey__ItemVo>> addCacheMap(Map<String,List<__SvKey__ItemVo>> cacheMap,String key,__SvKey__ItemVo __svKey__) {
		List<__SvKey__ItemVo> temp=cacheMap.containsKey(key)?cacheMap.get(key):new ArrayList<__SvKey__ItemVo>();
		temp.add(__svKey__);
		cacheMap.put(key,temp);
		return cacheMap;
	}

}
