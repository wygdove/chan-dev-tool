package __basepackage__.service.atom.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import __basepackage__.dao.bo.__BoKey__;
import __basepackage__.dao.mapper.__BoKey__Mapper;
import __basepackage__.model.__package__.__SvKey__QueryRequest;
import __basepackage__.model.__package__.__SvKey__SaveRequest;
import __basepackage__.model.__package__.__SvKey__VO;
import __basepackage__.service.atom.interfaces.I__SvKey__AtomSV;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.beans.BeanUtils;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

/**
 * @Title: __SvKey__AtomSVImpl
 * @Description:
 */
@Repository
@ConditionalOnMissingBean(value=I__SvKey__AtomSV.class,ignored=__SvKey__AtomSVImpl.class)
public class __SvKey__AtomSVImpl implements I__SvKey__AtomSV {
    
    @Resource
    private __BoKey__Mapper __boKey__Mapper;


    @Override
    public int add(__SvKey__SaveRequest request) {
        __BoKey__ __boKey__Request=new __BoKey__();
        BeanUtils.copyProperties(request,__boKey__Request);
        return __boKey__Mapper.insert(__boKey__Request);
    }

    @Override
    public int update(__SvKey__SaveRequest request) {
        __BoKey__ __boKey__Request=new __BoKey__();
        BeanUtils.copyProperties(request,__boKey__Request);
        QueryWrapper<__BoKey__> updateWrapper=new QueryWrapper<>();
        updateWrapper.lambda().eq(__BoKey__::getId,request.getId());
        return __boKey__Mapper.update(__boKey__Request,updateWrapper);
    }

    @Override
    public __SvKey__VO queryById(__SvKey__QueryRequest request) {
        __BoKey__ __boKey__=__boKey__Mapper.selectById(request.getId());
        __SvKey__VO result=new __SvKey__VO();
        BeanUtils.copyProperties(__boKey__,result);
        return result;
    }

    @Override
    public List<__SvKey__VO> queryList(__SvKey__QueryRequest request) {
        List<__SvKey__VO> result=new ArrayList<>();
        QueryWrapper<__BoKey__> queryWrapper=this.getQueryWrapper(request);
        List<__BoKey__> resList=__boKey__Mapper.selectList(queryWrapper);
        if(!CollectionUtils.isEmpty(resList)) {
            __SvKey__VO itemVo=null;
            for(__BoKey__ item:resList) {
                itemVo=new __SvKey__VO();
                BeanUtils.copyProperties(item,itemVo);
                result.add(itemVo);
            }
        }
        return result;
    }

    @Override
    public PageInfo<__SvKey__VO> queryPage(__SvKey__QueryRequest request) {
        PageInfo<__SvKey__VO> pageResult=new PageInfo<>();
        List<__SvKey__VO> result=new ArrayList<>();

        QueryWrapper<__BoKey__> queryWrapper=this.getQueryWrapper(request);
        List<__BoKey__> resList;
        Page<__BoKey__> pageData;
        PageHelper.startPage(request.getPageNo(),request.getPageSize());
        try {
            resList=__boKey__Mapper.selectList(queryWrapper);
            pageData=(Page<__BoKey__>)resList;
        }finally {
            PageHelper.clearPage();
        }
        if(!CollectionUtils.isEmpty(resList)) {
            __SvKey__VO itemVo=null;
            for(__BoKey__ item:resList) {
                itemVo=new __SvKey__VO();
                BeanUtils.copyProperties(item,itemVo);
                result.add(itemVo);
            }
            BeanUtils.copyProperties(pageData,pageResult);
        }
        pageResult.setList(result);
        return pageResult;
    }

    @Override
    public int count(__SvKey__QueryRequest request) {
        QueryWrapper<__BoKey__> queryWrapper=this.getQueryWrapper(request);
        return __boKey__Mapper.selectCount(queryWrapper);
    }


    private QueryWrapper<__BoKey__> getQueryWrapper(__SvKey__QueryRequest request) {
        QueryWrapper<__BoKey__> queryWrapper=new QueryWrapper<>();
        if(request!=null) {
__AddQueryWrapper__

//            if(StringUtils.hasText(request.getFieldLike())) {
//                String value="%"+request.getFieldLike()+"%";
//                queryWrapper.lambda().like(__BoKey__::getField,value);
//            }
//            if(!CollectionUtils.isEmpty(request.getFieldIn())) {
//                queryWrapper.lambda().in(__BoKey__::getField,request.getFieldIn());
//            }
        }
        return queryWrapper;
    }
}
